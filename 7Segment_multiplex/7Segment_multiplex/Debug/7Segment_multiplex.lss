
7Segment_multiplex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000001ec  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c40  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9c  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f0  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000535  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000237  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	36 c0       	rjmp	.+108    	; 0xfa <__bad_interrupt>
  8e:	00 00       	nop
  90:	34 c0       	rjmp	.+104    	; 0xfa <__bad_interrupt>
  92:	00 00       	nop
  94:	32 c0       	rjmp	.+100    	; 0xfa <__bad_interrupt>
  96:	00 00       	nop
  98:	30 c0       	rjmp	.+96     	; 0xfa <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2e c0       	rjmp	.+92     	; 0xfa <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2c c0       	rjmp	.+88     	; 0xfa <__bad_interrupt>
  a2:	00 00       	nop
  a4:	2a c0       	rjmp	.+84     	; 0xfa <__bad_interrupt>
  a6:	00 00       	nop
  a8:	28 c0       	rjmp	.+80     	; 0xfa <__bad_interrupt>
  aa:	00 00       	nop
  ac:	26 c0       	rjmp	.+76     	; 0xfa <__bad_interrupt>
  ae:	00 00       	nop
  b0:	24 c0       	rjmp	.+72     	; 0xfa <__bad_interrupt>
  b2:	00 00       	nop
  b4:	22 c0       	rjmp	.+68     	; 0xfa <__bad_interrupt>
  b6:	00 00       	nop
  b8:	20 c0       	rjmp	.+64     	; 0xfa <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1e c0       	rjmp	.+60     	; 0xfa <__bad_interrupt>
  be:	00 00       	nop
  c0:	1c c0       	rjmp	.+56     	; 0xfa <__bad_interrupt>
  c2:	00 00       	nop
  c4:	1a c0       	rjmp	.+52     	; 0xfa <__bad_interrupt>
  c6:	00 00       	nop
  c8:	18 c0       	rjmp	.+48     	; 0xfa <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	ec ee       	ldi	r30, 0xEC	; 236
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a4 31       	cpi	r26, 0x14	; 20
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>
  f6:	02 d0       	rcall	.+4      	; 0xfc <main>
  f8:	77 c0       	rjmp	.+238    	; 0x1e8 <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <main>:
#include <avr/io.h>
#define DELAY 5


int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	64 97       	sbiw	r28, 0x14	; 20
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
	int segmente[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 110:	84 e1       	ldi	r24, 0x14	; 20
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f2 e0       	ldi	r31, 0x02	; 2
 116:	de 01       	movw	r26, r28
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x1e>
	int i = 0;
	
	DDRC = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 b9       	out	0x07, r24	; 7
	DDRF = 0xFF;
 126:	80 bb       	out	0x10, r24	; 16
 128:	8e 01       	movw	r16, r28
 12a:	0b 5e       	subi	r16, 0xEB	; 235
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
			for(hundert = 0; hundert <= 9; hundert++)
				for(zehner = 0; zehner <= 9; zehner++)
					for(einer = 0; einer <= 9; einer++)
						for(i = 0; i < 100; i++)
						{
							PORTF = 0xfe; // 1111 1110 //Linke Anzeige
 12e:	0f 2e       	mov	r0, r31
 130:	fe ef       	ldi	r31, 0xFE	; 254
 132:	df 2e       	mov	r13, r31
 134:	f0 2d       	mov	r31, r0
							PORTC = segmente[tausend];
							_delay_ms(DELAY);
			
							PORTF = 0xfd; // 1111 1101
 136:	0f 2e       	mov	r0, r31
 138:	fd ef       	ldi	r31, 0xFD	; 253
 13a:	ef 2e       	mov	r14, r31
 13c:	f0 2d       	mov	r31, r0
							PORTC = segmente[hundert];
							_delay_ms(DELAY);
			
							PORTF = 0xfb;
 13e:	0f 2e       	mov	r0, r31
 140:	fb ef       	ldi	r31, 0xFB	; 251
 142:	ff 2e       	mov	r15, r31
 144:	f0 2d       	mov	r31, r0
							PORTC = segmente[zehner];
							_delay_ms(DELAY);
			
							PORTF = 0xf7; // 1111 0111 //Rechte Anzeige
 146:	37 ef       	ldi	r19, 0xF7	; 247
#include <avr/io.h>
#define DELAY 5


int main(void)
{
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	5c 01       	movw	r10, r24
 14e:	48 c0       	rjmp	.+144    	; 0x1e0 <main+0xe4>
			for(hundert = 0; hundert <= 9; hundert++)
				for(zehner = 0; zehner <= 9; zehner++)
					for(einer = 0; einer <= 9; einer++)
						for(i = 0; i < 100; i++)
						{
							PORTF = 0xfe; // 1111 1110 //Linke Anzeige
 150:	d1 ba       	out	0x11, r13	; 17
							PORTC = segmente[tausend];
 152:	d5 01       	movw	r26, r10
 154:	2c 91       	ld	r18, X
 156:	28 b9       	out	0x08, r18	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	af e1       	ldi	r26, 0x1F	; 31
 15a:	be e4       	ldi	r27, 0x4E	; 78
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x60>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x66>
 162:	00 00       	nop
							_delay_ms(DELAY);
			
							PORTF = 0xfd; // 1111 1101
 164:	e1 ba       	out	0x11, r14	; 17
							PORTC = segmente[hundert];
 166:	da 01       	movw	r26, r20
 168:	2c 91       	ld	r18, X
 16a:	28 b9       	out	0x08, r18	; 8
 16c:	af e1       	ldi	r26, 0x1F	; 31
 16e:	be e4       	ldi	r27, 0x4E	; 78
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x74>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x7a>
 176:	00 00       	nop
							_delay_ms(DELAY);
			
							PORTF = 0xfb;
 178:	f1 ba       	out	0x11, r15	; 17
							PORTC = segmente[zehner];
 17a:	db 01       	movw	r26, r22
 17c:	2c 91       	ld	r18, X
 17e:	28 b9       	out	0x08, r18	; 8
 180:	af e1       	ldi	r26, 0x1F	; 31
 182:	be e4       	ldi	r27, 0x4E	; 78
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x88>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x8e>
 18a:	00 00       	nop
							_delay_ms(DELAY);
			
							PORTF = 0xf7; // 1111 0111 //Rechte Anzeige
 18c:	31 bb       	out	0x11, r19	; 17
							PORTC = segmente[einer];
 18e:	20 81       	ld	r18, Z
 190:	28 b9       	out	0x08, r18	; 8
 192:	af e1       	ldi	r26, 0x1F	; 31
 194:	be e4       	ldi	r27, 0x4E	; 78
 196:	11 97       	sbiw	r26, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x9a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xa0>
 19c:	00 00       	nop
 19e:	01 97       	sbiw	r24, 0x01	; 1
    {
		for(tausend = 0; tausend <= 9; tausend++)
			for(hundert = 0; hundert <= 9; hundert++)
				for(zehner = 0; zehner <= 9; zehner++)
					for(einer = 0; einer <= 9; einer++)
						for(i = 0; i < 100; i++)
 1a0:	b9 f6       	brne	.-82     	; 0x150 <main+0x54>
 1a2:	32 96       	adiw	r30, 0x02	; 2
    while (1) 
    {
		for(tausend = 0; tausend <= 9; tausend++)
			for(hundert = 0; hundert <= 9; hundert++)
				for(zehner = 0; zehner <= 9; zehner++)
					for(einer = 0; einer <= 9; einer++)
 1a4:	0e 17       	cp	r16, r30
 1a6:	1f 07       	cpc	r17, r31
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <main+0xb4>
#include <avr/io.h>
#define DELAY 5


int main(void)
{
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	d0 cf       	rjmp	.-96     	; 0x150 <main+0x54>
 1b0:	6e 5f       	subi	r22, 0xFE	; 254
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
	
    while (1) 
    {
		for(tausend = 0; tausend <= 9; tausend++)
			for(hundert = 0; hundert <= 9; hundert++)
				for(zehner = 0; zehner <= 9; zehner++)
 1b4:	06 17       	cp	r16, r22
 1b6:	17 07       	cpc	r17, r23
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <main+0xc4>
#include <avr/io.h>
#define DELAY 5


int main(void)
{
 1ba:	fe 01       	movw	r30, r28
 1bc:	31 96       	adiw	r30, 0x01	; 1
 1be:	f5 cf       	rjmp	.-22     	; 0x1aa <main+0xae>
 1c0:	4e 5f       	subi	r20, 0xFE	; 254
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t tausend, hundert, zehner, einer;
	
    while (1) 
    {
		for(tausend = 0; tausend <= 9; tausend++)
			for(hundert = 0; hundert <= 9; hundert++)
 1c4:	04 17       	cp	r16, r20
 1c6:	15 07       	cpc	r17, r21
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <main+0xd6>
#include <avr/io.h>
#define DELAY 5


int main(void)
{
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	f4 cf       	rjmp	.-24     	; 0x1ba <main+0xbe>
 1d2:	b2 e0       	ldi	r27, 0x02	; 2
 1d4:	ab 0e       	add	r10, r27
 1d6:	b1 1c       	adc	r11, r1
	
	uint8_t tausend, hundert, zehner, einer;
	
    while (1) 
    {
		for(tausend = 0; tausend <= 9; tausend++)
 1d8:	0a 15       	cp	r16, r10
 1da:	1b 05       	cpc	r17, r11
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <main+0xe4>
 1de:	b4 cf       	rjmp	.-152    	; 0x148 <main+0x4c>
#include <avr/io.h>
#define DELAY 5


int main(void)
{
 1e0:	ae 01       	movw	r20, r28
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	f1 cf       	rjmp	.-30     	; 0x1ca <main+0xce>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
